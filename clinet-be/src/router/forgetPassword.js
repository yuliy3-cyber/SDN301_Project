const express = require("express");
const router = express.Router();
const { generateOTP, sendOTPEmail } = require("../otp/otpService");
const userBE = require("../model/userBE");
const bcrypt = require("bcryptjs");

const otpStore = new Map();

// üìå 1. G·ª≠i OTP
router.post("/forgot-password", async (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).json({ message: "Email l√† b·∫Øt bu·ªôc" });

  try {
    const user = await userBE.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng" });
    }

    const otp = generateOTP();
    otpStore.set(email, { otp, expiresAt: Date.now() + 5 * 60 * 1000 });

    await sendOTPEmail(email, otp);
    return res.status(200).json({ message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email" });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: "L·ªói khi g·ª≠i OTP" });
  }
});

// üìå 2. X√°c minh OTP
router.post("/verify-otp", (req, res) => {
  const { email, otp } = req.body;
  if (!email || !otp) {
    return res.status(400).json({ message: "Thi·∫øu email ho·∫∑c m√£ OTP" });
  }

  const record = otpStore.get(email);
  if (!record) {
    return res.status(400).json({ message: "Kh√¥ng t√¨m th·∫•y OTP cho email n√†y" });
  }

  if (Date.now() > record.expiresAt) {
    otpStore.delete(email);
    return res.status(400).json({ message: "M√£ OTP ƒë√£ h·∫øt h·∫°n" });
  }

  if (record.otp !== otp) {
    return res.status(400).json({ message: "M√£ OTP kh√¥ng ch√≠nh x√°c" });
  }

  return res.status(200).json({ message: "X√°c th·ª±c OTP th√†nh c√¥ng" });
});

// üìå 3. ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi
router.post("/reset-password", async (req, res) => {
  const { email, password } = req.body;
  if (!email || !password) {
    return res.status(400).json({ message: "Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u m·ªõi" });
  }

  try {
    const user = await userBE.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    user.password = hashedPassword;
    await user.save();

    otpStore.delete(email);
    return res.status(200).json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u" });
  }
});

module.exports = router;
